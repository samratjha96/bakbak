/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TranscribeRouteImport } from './routes/transcribe'
import { Route as RecordRouteImport } from './routes/record'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RecordingsIndexRouteImport } from './routes/recordings/index'
import { Route as WorkspaceNewRouteImport } from './routes/workspace/new'
import { Route as WorkspaceWorkspaceIdRouteImport } from './routes/workspace/$workspaceId'
import { Route as RecordingsNewRouteImport } from './routes/recordings/new'
import { Route as RecordingsIdRouteImport } from './routes/recordings/$id'
import { Route as ApiRecordingsRecordingIdTransliterateIndexRouteImport } from './routes/api/recordings/$recordingId/transliterate/index'
import { Route as ApiRecordingsRecordingIdTranslationIndexRouteImport } from './routes/api/recordings/$recordingId/translation/index'
import { Route as ApiRecordingsRecordingIdTranslateIndexRouteImport } from './routes/api/recordings/$recordingId/translate/index'
import { Route as ApiRecordingsRecordingIdTranscriptionIndexRouteImport } from './routes/api/recordings/$recordingId/transcription/index'
import { Route as ApiRecordingsRecordingIdTranscribeIndexRouteImport } from './routes/api/recordings/$recordingId/transcribe/index'
import { Route as ApiRecordingsRecordingIdTranscribeStatusRouteImport } from './routes/api/recordings/$recordingId/transcribe/status'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const TranscribeRoute = TranscribeRouteImport.update({
  id: '/transcribe',
  path: '/transcribe',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordRoute = RecordRouteImport.update({
  id: '/record',
  path: '/record',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordingsIndexRoute = RecordingsIndexRouteImport.update({
  id: '/recordings/',
  path: '/recordings/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceNewRoute = WorkspaceNewRouteImport.update({
  id: '/workspace/new',
  path: '/workspace/new',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceWorkspaceIdRoute = WorkspaceWorkspaceIdRouteImport.update({
  id: '/workspace/$workspaceId',
  path: '/workspace/$workspaceId',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordingsNewRoute = RecordingsNewRouteImport.update({
  id: '/recordings/new',
  path: '/recordings/new',
  getParentRoute: () => rootRouteImport,
} as any)
const RecordingsIdRoute = RecordingsIdRouteImport.update({
  id: '/recordings/$id',
  path: '/recordings/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRecordingsRecordingIdTransliterateIndexRoute =
  ApiRecordingsRecordingIdTransliterateIndexRouteImport.update({
    id: '/api/recordings/$recordingId/transliterate/',
    path: '/api/recordings/$recordingId/transliterate/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiRecordingsRecordingIdTranslationIndexRoute =
  ApiRecordingsRecordingIdTranslationIndexRouteImport.update({
    id: '/api/recordings/$recordingId/translation/',
    path: '/api/recordings/$recordingId/translation/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiRecordingsRecordingIdTranslateIndexRoute =
  ApiRecordingsRecordingIdTranslateIndexRouteImport.update({
    id: '/api/recordings/$recordingId/translate/',
    path: '/api/recordings/$recordingId/translate/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiRecordingsRecordingIdTranscriptionIndexRoute =
  ApiRecordingsRecordingIdTranscriptionIndexRouteImport.update({
    id: '/api/recordings/$recordingId/transcription/',
    path: '/api/recordings/$recordingId/transcription/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiRecordingsRecordingIdTranscribeIndexRoute =
  ApiRecordingsRecordingIdTranscribeIndexRouteImport.update({
    id: '/api/recordings/$recordingId/transcribe/',
    path: '/api/recordings/$recordingId/transcribe/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiRecordingsRecordingIdTranscribeStatusRoute =
  ApiRecordingsRecordingIdTranscribeStatusRouteImport.update({
    id: '/api/recordings/$recordingId/transcribe/status',
    path: '/api/recordings/$recordingId/transcribe/status',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/transcribe': typeof TranscribeRoute
  '/recordings/$id': typeof RecordingsIdRoute
  '/recordings/new': typeof RecordingsNewRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/recordings': typeof RecordingsIndexRoute
  '/api/recordings/$recordingId/transcribe/status': typeof ApiRecordingsRecordingIdTranscribeStatusRoute
  '/api/recordings/$recordingId/transcribe': typeof ApiRecordingsRecordingIdTranscribeIndexRoute
  '/api/recordings/$recordingId/transcription': typeof ApiRecordingsRecordingIdTranscriptionIndexRoute
  '/api/recordings/$recordingId/translate': typeof ApiRecordingsRecordingIdTranslateIndexRoute
  '/api/recordings/$recordingId/translation': typeof ApiRecordingsRecordingIdTranslationIndexRoute
  '/api/recordings/$recordingId/transliterate': typeof ApiRecordingsRecordingIdTransliterateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/transcribe': typeof TranscribeRoute
  '/recordings/$id': typeof RecordingsIdRoute
  '/recordings/new': typeof RecordingsNewRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/recordings': typeof RecordingsIndexRoute
  '/api/recordings/$recordingId/transcribe/status': typeof ApiRecordingsRecordingIdTranscribeStatusRoute
  '/api/recordings/$recordingId/transcribe': typeof ApiRecordingsRecordingIdTranscribeIndexRoute
  '/api/recordings/$recordingId/transcription': typeof ApiRecordingsRecordingIdTranscriptionIndexRoute
  '/api/recordings/$recordingId/translate': typeof ApiRecordingsRecordingIdTranslateIndexRoute
  '/api/recordings/$recordingId/translation': typeof ApiRecordingsRecordingIdTranslationIndexRoute
  '/api/recordings/$recordingId/transliterate': typeof ApiRecordingsRecordingIdTransliterateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/transcribe': typeof TranscribeRoute
  '/recordings/$id': typeof RecordingsIdRoute
  '/recordings/new': typeof RecordingsNewRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/recordings/': typeof RecordingsIndexRoute
  '/api/recordings/$recordingId/transcribe/status': typeof ApiRecordingsRecordingIdTranscribeStatusRoute
  '/api/recordings/$recordingId/transcribe/': typeof ApiRecordingsRecordingIdTranscribeIndexRoute
  '/api/recordings/$recordingId/transcription/': typeof ApiRecordingsRecordingIdTranscriptionIndexRoute
  '/api/recordings/$recordingId/translate/': typeof ApiRecordingsRecordingIdTranslateIndexRoute
  '/api/recordings/$recordingId/translation/': typeof ApiRecordingsRecordingIdTranslationIndexRoute
  '/api/recordings/$recordingId/transliterate/': typeof ApiRecordingsRecordingIdTransliterateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/record'
    | '/transcribe'
    | '/recordings/$id'
    | '/recordings/new'
    | '/workspace/$workspaceId'
    | '/workspace/new'
    | '/recordings'
    | '/api/recordings/$recordingId/transcribe/status'
    | '/api/recordings/$recordingId/transcribe'
    | '/api/recordings/$recordingId/transcription'
    | '/api/recordings/$recordingId/translate'
    | '/api/recordings/$recordingId/translation'
    | '/api/recordings/$recordingId/transliterate'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/record'
    | '/transcribe'
    | '/recordings/$id'
    | '/recordings/new'
    | '/workspace/$workspaceId'
    | '/workspace/new'
    | '/recordings'
    | '/api/recordings/$recordingId/transcribe/status'
    | '/api/recordings/$recordingId/transcribe'
    | '/api/recordings/$recordingId/transcription'
    | '/api/recordings/$recordingId/translate'
    | '/api/recordings/$recordingId/translation'
    | '/api/recordings/$recordingId/transliterate'
  id:
    | '__root__'
    | '/'
    | '/record'
    | '/transcribe'
    | '/recordings/$id'
    | '/recordings/new'
    | '/workspace/$workspaceId'
    | '/workspace/new'
    | '/recordings/'
    | '/api/recordings/$recordingId/transcribe/status'
    | '/api/recordings/$recordingId/transcribe/'
    | '/api/recordings/$recordingId/transcription/'
    | '/api/recordings/$recordingId/translate/'
    | '/api/recordings/$recordingId/translation/'
    | '/api/recordings/$recordingId/transliterate/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecordRoute: typeof RecordRoute
  TranscribeRoute: typeof TranscribeRoute
  RecordingsIdRoute: typeof RecordingsIdRoute
  RecordingsNewRoute: typeof RecordingsNewRoute
  WorkspaceWorkspaceIdRoute: typeof WorkspaceWorkspaceIdRoute
  WorkspaceNewRoute: typeof WorkspaceNewRoute
  RecordingsIndexRoute: typeof RecordingsIndexRoute
  ApiRecordingsRecordingIdTranscribeStatusRoute: typeof ApiRecordingsRecordingIdTranscribeStatusRoute
  ApiRecordingsRecordingIdTranscribeIndexRoute: typeof ApiRecordingsRecordingIdTranscribeIndexRoute
  ApiRecordingsRecordingIdTranscriptionIndexRoute: typeof ApiRecordingsRecordingIdTranscriptionIndexRoute
  ApiRecordingsRecordingIdTranslateIndexRoute: typeof ApiRecordingsRecordingIdTranslateIndexRoute
  ApiRecordingsRecordingIdTranslationIndexRoute: typeof ApiRecordingsRecordingIdTranslationIndexRoute
  ApiRecordingsRecordingIdTransliterateIndexRoute: typeof ApiRecordingsRecordingIdTransliterateIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transcribe': {
      id: '/transcribe'
      path: '/transcribe'
      fullPath: '/transcribe'
      preLoaderRoute: typeof TranscribeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/record': {
      id: '/record'
      path: '/record'
      fullPath: '/record'
      preLoaderRoute: typeof RecordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recordings/': {
      id: '/recordings/'
      path: '/recordings'
      fullPath: '/recordings'
      preLoaderRoute: typeof RecordingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/new': {
      id: '/workspace/new'
      path: '/workspace/new'
      fullPath: '/workspace/new'
      preLoaderRoute: typeof WorkspaceNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recordings/new': {
      id: '/recordings/new'
      path: '/recordings/new'
      fullPath: '/recordings/new'
      preLoaderRoute: typeof RecordingsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recordings/$id': {
      id: '/recordings/$id'
      path: '/recordings/$id'
      fullPath: '/recordings/$id'
      preLoaderRoute: typeof RecordingsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/transliterate/': {
      id: '/api/recordings/$recordingId/transliterate/'
      path: '/api/recordings/$recordingId/transliterate'
      fullPath: '/api/recordings/$recordingId/transliterate'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTransliterateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/translation/': {
      id: '/api/recordings/$recordingId/translation/'
      path: '/api/recordings/$recordingId/translation'
      fullPath: '/api/recordings/$recordingId/translation'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTranslationIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/translate/': {
      id: '/api/recordings/$recordingId/translate/'
      path: '/api/recordings/$recordingId/translate'
      fullPath: '/api/recordings/$recordingId/translate'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTranslateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/transcription/': {
      id: '/api/recordings/$recordingId/transcription/'
      path: '/api/recordings/$recordingId/transcription'
      fullPath: '/api/recordings/$recordingId/transcription'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTranscriptionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/transcribe/': {
      id: '/api/recordings/$recordingId/transcribe/'
      path: '/api/recordings/$recordingId/transcribe'
      fullPath: '/api/recordings/$recordingId/transcribe'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTranscribeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recordings/$recordingId/transcribe/status': {
      id: '/api/recordings/$recordingId/transcribe/status'
      path: '/api/recordings/$recordingId/transcribe/status'
      fullPath: '/api/recordings/$recordingId/transcribe/status'
      preLoaderRoute: typeof ApiRecordingsRecordingIdTranscribeStatusRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecordRoute: RecordRoute,
  TranscribeRoute: TranscribeRoute,
  RecordingsIdRoute: RecordingsIdRoute,
  RecordingsNewRoute: RecordingsNewRoute,
  WorkspaceWorkspaceIdRoute: WorkspaceWorkspaceIdRoute,
  WorkspaceNewRoute: WorkspaceNewRoute,
  RecordingsIndexRoute: RecordingsIndexRoute,
  ApiRecordingsRecordingIdTranscribeStatusRoute:
    ApiRecordingsRecordingIdTranscribeStatusRoute,
  ApiRecordingsRecordingIdTranscribeIndexRoute:
    ApiRecordingsRecordingIdTranscribeIndexRoute,
  ApiRecordingsRecordingIdTranscriptionIndexRoute:
    ApiRecordingsRecordingIdTranscriptionIndexRoute,
  ApiRecordingsRecordingIdTranslateIndexRoute:
    ApiRecordingsRecordingIdTranslateIndexRoute,
  ApiRecordingsRecordingIdTranslationIndexRoute:
    ApiRecordingsRecordingIdTranslationIndexRoute,
  ApiRecordingsRecordingIdTransliterateIndexRoute:
    ApiRecordingsRecordingIdTransliterateIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
